pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "surajp1234/surajp1234nodejsapp"
        DOCKERHUB_CREDENTIALS_ID = "dockerhub-creds"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/master']], 
                    userRemoteConfigs: [[url: 'https://github.com/SurajP5697/NodejsProject.git']]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Docker Login') {
            steps {
                echo 'Logging in to DockerHub...'
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to DockerHub...'
                sh 'docker push $DOCKER_IMAGE'
            }
        }

        stage('Run Container') {
            steps {
                echo 'Stopping any running container from the same image...'
                sh "docker stop \$(docker ps -q --filter ancestor=$DOCKER_IMAGE) || true"
                sh "docker rm \$(docker ps -a -q --filter ancestor=$DOCKER_IMAGE) || true"

                echo 'Running new container...'
                sh 'docker run -d -p 3000:3000 $DOCKER_IMAGE'
            }
        }

        stage('Clean Up Image') {
            steps {
                echo 'Cleaning up local Docker image to save disk space...'
                sh 'docker rmi $DOCKER_IMAGE || true'
            }
        }
    }
}
